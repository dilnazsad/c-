using System.Text.Json;

class MainClass
{
    public enum Choice
    {
        Add,
        Edit,
        Remove,
        Recovery,
        List,
        Exit
    }

    static Dictionary<Choice, int> choicemap = new Dictionary<Choice, int>()
    {
        { Choice.Add, 3 },
        { Choice.Edit, 4 },
        { Choice.Remove, 2 },
        { Choice.Recovery, 2 },
        { Choice.List, 1 },
        { Choice.Exit, 1 }
    };

    public record Person(int ID, string FirstName, string LastName);

    static int ID = 1;
    static List<Person> ActiveList = new List<Person>();
    static List<Person> RemovedList = new List<Person>();

    static void Save(string fileName, List<Person> list)
    {
        using (FileStream fs = new FileStream(fileName, FileMode.Create))
        {
            JsonSerializer.SerializeAsync(fs, list).GetAwaiter().GetResult();
        }
    }

    static List<Person> Load(string fileName)
    {
        if (!File.Exists(fileName))
        {
            return null;
        }

        using (FileStream fs = File.OpenRead(fileName))
        {
            var activeList = JsonSerializer.DeserializeAsync<List<Person>>(fs).GetAwaiter().GetResult();

            int maxID = 0;
            foreach (var person in activeList.Concat(RemovedList))
            {
                if (person.ID > maxID)
                {
                    maxID = person.ID;
                }
            }

            ID = maxID + 1;
            return activeList;
        }
    }





    public static void Main(string[] args)
    {
        ActiveList = Load("active.json") ?? new List<Person>();
        RemovedList = Load("removed.json") ?? new List<Person>();

        while (true)
        {
            Console.WriteLine("\nEnter the action you want to perform (Add, Edit, Remove, Recovery, List, Exit): ");
            string input = Console.ReadLine();
            string[] inputs = input.Split(' ');
            Choice choice;

            if (!Enum.TryParse(inputs[0], ignoreCase: true, out choice))
            {
                Console.WriteLine("Invalid choice. Please enter a valid choice.");
                continue;
            }

            else if (inputs.Length != choicemap[choice])
            {
                Console.WriteLine("Invalid input.");
            }

            else
            {

                switch (choice)
                {
                    case Choice.Add:
                        Add(inputs[1], inputs[2]);
                        break;
                    case Choice.Edit:
                        Edit(Convert.ToInt32(inputs[1]), inputs[2], inputs[3]);
                        break;
                    case Choice.Remove:
                        Remove(Convert.ToInt32(inputs[1]));
                        break;
                    case Choice.Recovery:
                        Recovery(Convert.ToInt32(inputs[1]));
                        break;
                    case Choice.List:
                        List();
                        break;
                    case Choice.Exit:
                        Save("active.json", ActiveList);
                        Save("removed.json", RemovedList);
                        return;
                }
            }
        }
    }


    static void Add(string firstName, string lastName)
    {
        Person user = new Person(ID, firstName, lastName);
        ActiveList.Add(user);
        ID++;

        Console.WriteLine("\nPerson added successfully\n");
    }

    static void Edit(int id, string newFirstName, string newLastName)
    {
        Person person = ActiveList.Find(p => p.ID == id);

        if (person == null)
        {
            Console.WriteLine("No person founded with ID " + id);
            return;
        };

        int index = ActiveList.IndexOf(person);
        ActiveList[index] = person with
        {
            FirstName = newFirstName,
            LastName = newLastName
        };

        Console.WriteLine("\nPerson edited successfully\n");
    }

    static void Remove(int id)
    {
        Person person = ActiveList.Find(p => p.ID == id);

        if (person == null)
        {
            Console.WriteLine("No person founded with ID " + id);
        };

        ActiveList.Remove(person);
        RemovedList.Add(person);

        Console.WriteLine("\nPerson removed successfully\n");
    }

    static void Recovery(int id)
    {
        Person person = RemovedList.Find(p => p.ID == id);
        if (person == null)
        {
            Console.WriteLine("No person founded with ID " + id);
        };

        RemovedList.Remove(person);
        ActiveList.Add(person);

        Console.WriteLine("\nPerson recovered successfully\n");

    }

    static void List()
    {
        Console.WriteLine("\nEnter 1 for active list and 2 for removed list: ");
        int listChoice = Convert.ToInt32(Console.ReadLine());

        if (listChoice == 1)
        {
            if (ActiveList.Count == 0)
            {
                Console.WriteLine("There is no active user");
            }
            else
            {
                Console.WriteLine("\nActive List:\nId\tFirst Name\tLast Name");
                foreach (var person in ActiveList)
                {
                    Console.WriteLine("\n" + person.ID + "\t" + person.FirstName + "\t\t" + person.LastName);
                }
            }
        }

        else if (listChoice == 2)
        {
            if (RemovedList.Count == 0)
            {
                Console.WriteLine("There is no removed user");
            }
            else
            {
                Console.WriteLine("\nRemoved List:\nId\tFirst Name\tLast Name");
                foreach (var person in RemovedList)
                {
                    Console.WriteLine("\n" + person.ID + "\t" + person.FirstName + "\t\t" + person.LastName);
                }
            }
        }

        else
        {
            Console.WriteLine("\nInvalid input. Please enter 1 for active list or 2 for removed list.");
        }
    }
}
