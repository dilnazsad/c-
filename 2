using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.Json;

class MainClass
{
    public enum Choice
    {
        Add,
        Edit,
        Remove,
        Recovery,
        List,
        Exit
    }

    static Dictionary<Choice, int> choicemap = new Dictionary<Choice, int>()
    {
        { Choice.Add, 3 },
        { Choice.Edit, 4 },
        { Choice.Remove, 2 },
        { Choice.Recovery, 2 },
        { Choice.List, 1 },
        { Choice.Exit, 1 }
    };

    public record Person(int ID, string FirstName, string LastName);

    static int ID = 1;
    static List<Person> ActiveList = new List<Person>();
    static List<Person> RemovedList = new List<Person>();

    static void SaveAsJson(string fileName, List<Person> list)
    {
        using (FileStream fs = new FileStream(fileName, FileMode.OpenOrCreate))
        {
            string json = JsonSerializer.Serialize(list);
            Console.WriteLine("\n" + json);
            List<Person> deserializedList = JsonSerializer.Deserialize<List<Person>>(json);
            foreach (Person person in deserializedList)
            {
                Console.WriteLine(person);
            }
        }
    }

    static List<Person> LoadFromJson(string fileName)
    {
        if (!File.Exists(fileName))
        {
            return null;
        }

        using (FileStream fs = File.OpenRead(fileName))
        {
            byte[] data = new byte[fs.Length];
            fs.Read(data, 0, data.Length);
            return JsonSerializer.Deserialize<List<Person>>(Encoding.UTF8.GetString(data));
        }
    }

    static void Add(string firstName, string lastName)
    {
        ActiveList.Add(new Person(ID, firstName, lastName));
        ID++;
    }

    static void Edit(int id, string firstName, string lastName)
    {
        var person = ActiveList.Find(x => x.ID == id);
        if (person == null)
        {
            Console.WriteLine("Person not found");
            return;
        }

        int index = ActiveList.IndexOf(person);
        ActiveList[index] = new Person(person.ID, firstName, lastName);
    }

    static void Remove(int id)
    {
        var person = ActiveList.Find(x => x.ID == id);
        if (person == null)
        {
            Console.WriteLine("Person not found");
            return;
        }

        ActiveList.Remove(person);
        RemovedList.Add(person);
    }

    static void Recovery(int id)
    {
        var person = RemovedList.Find(x => x.ID == id);
        if (person == null)
        {
            Console.WriteLine("Person not found");
            return
