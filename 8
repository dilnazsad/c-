Add

app.Use(async (context, next) =>
{
    if (context.Request.Path == "/api/user/add" && context.Request.HasJsonContentType())
    {
        var jsonoptions = new JsonSerializerOptions();
        jsonoptions.Converters.Add(new PersonConverter());

        var person = await context.Request.ReadFromJsonAsync<Person>(jsonoptions);
        if (person != null)
        {
            // Add the person to a list
            persons.Add(person);

            // Return a success message
            var responseText = $"Added {person.Name} to the list";
            await context.Response.WriteAsJsonAsync(new { text = responseText });
            return;
        }
    }
    await next();
});


Remove

app.Use(async (context, next) =>
{
    if (context.Request.Path == "/api/user/remove" && context.Request.Query.ContainsKey("name"))
    {
        var name = context.Request.Query["name"].ToString();

        // Remove the person from the list
        var removed = persons.RemoveAll(p => p.Name == name);

        // Return a success or error message
        var responseText = removed > 0 ? $"Removed {name} from the list" : $"Could not find {name} in the list";
        await context.Response.WriteAsJsonAsync(new { text = responseText });
        return;
    }
    await next();
});


Edit

app.Use(async (context, next) =>
{
    if (context.Request.Path == "/api/user/edit" && context.Request.Query.ContainsKey("name") && context.Request.HasJsonContentType())
    {
        var name = context.Request.Query["name"].ToString();
        var jsonoptions = new JsonSerializerOptions();
        jsonoptions.Converters.Add(new PersonConverter());

        var person = await context.Request.ReadFromJsonAsync<Person>(jsonoptions);
        if (person != null)
        {
            // Find the person in the list and update their values
            var edited = persons.FirstOrDefault(p => p.Name == name);
            if (edited != null)
            {
                edited.Name = person.Name;
                edited.Age = person.Age;
                var responseText = $"Updated {name} in the list";
                await context.Response.WriteAsJsonAsync(new { text = responseText });
                return;
            }
        }
    }
    await next();
});


List

app.Use(async (context, next) =>
{
    if (context.Request.Path == "/api/user/list")
    {
        // Return a JSON array of all persons
        await context.Response.WriteAsJsonAsync(persons);
        return;
    }
   
